const Telegraf = require('telegraf');
const Extra = require('telegraf/extra');
const marathonBot = new Telegraf(process.env.HLFBOT_TOKEN);
const Promo = require('./schema');

const MAX_PROMO_QTY = 5;

/**
 * Commands
 */
const helpCommand = ({ reply }) => {
  const helpMessage = `
    –î–ª—è –ø–æ–ª—É—á–∏–Ω–∏—è –ø—Ä–æ–º–æ-–∫–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:
    /promo –í–ê–®_ID –§–ê–ú–ò–õ–ò–Ø_TAB_TEAM –ö–û–õ–ò–ß–ï–°–¢–í–û_–ü–†–û–ú–û–ö–û–î–û–í
    –ù–∞–ø—Ä–∏–º–µ—Ä: /promo 1234567890 –ê–Ω—Ü–∏–±–æ—Ä 5
    –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–º–æ-–∫–æ–¥–æ–≤ –Ω–∞ –æ–¥–∏–Ω ID - 5
  `;
  reply(helpMessage);
};

const promoCommand = async ({ reply, from, message: { text } }) => {
  const pattern = /\/promo\s+(\d+)\s+([A-z–ê-—è]+)\s+(\d+)/;
  if (pattern.test(text)) {
    const match = text.match(pattern);
    const partnerId = match[1];
    const tabTeam = match[2];
    const codeQty = Number(match[3]);

    if (codeQty > MAX_PROMO_QTY) {
      return reply(
        `–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ *${codeQty}* –ø—Ä–æ–º–æ-–∫–æ–¥–æ–≤!\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–º–æ-–∫–æ–¥–æ–≤ –Ω–∞ –æ–¥–∏–Ω ID - 5`,
        Extra.markdown()
      );
    }

    // check how many promo codes were used by this partner
    const usedPromoCount = await Promo.countDocuments({
      isUsed: true,
      ipId: partnerId
    });

    if (usedPromoCount >= MAX_PROMO_QTY) {
      return reply(
        `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–º–æ-–∫–æ–¥–æ–≤
        \n_–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–º–æ-–∫–æ–¥–æ–≤ –Ω–∞ –æ–¥–∏–Ω ID - 5_`,
        Extra.markdown()
      );
    }

    // requested amount of promo codes more then promo codes left for this id
    if (MAX_PROMO_QTY - usedPromoCount < codeQty) {
      return reply(
        `üôÅ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –º—ã –Ω–µ –º–æ–∂–µ–º –≤—ã–¥–∞—Ç—å –≤–∞–º *${codeQty}* –ø—Ä–æ–º–æ-–∫–æ–¥–æ–≤
        \nüéÅ –í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ *${usedPromoCount}* –ø—Ä–æ–º–æ-–∫–æ–¥–æ–≤
        \nüíé –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å *${MAX_PROMO_QTY - usedPromoCount}* –ø—Ä–æ–º–æ-–∫–æ–¥–æ–≤
        \n_–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–º–æ-–∫–æ–¥–æ–≤ –Ω–∞ –æ–¥–∏–Ω ID - 5_`,
        Extra.markdown()
      );
    }

    const promoCodes = await Promo.find({ isUsed: false }).limit(codeQty);
    const ids = promoCodes.map(({ _id }) => _id);
    console.log(ids);

    // update used promo with data and save
    const updateResult = await Promo.updateMany(
      { _id: { $in: promoCodes.map(({ _id }) => _id) } },
      { ipId: partnerId, tabTeam, isUsed: true }
    );

    const promoCodesReply = promoCodes
      .map(({ code }) => `üèÉ‚Äç *${code}*`)
      .join('\n');

    reply(
      `üéâ *–í—Å–µ –≥–æ—Ç–æ–≤–æ!* üéâ
      \n–ö–æ–ø–∏—Ä—É–π—Ç–µ –≤–∞—à–∏ –ø—Ä–æ–º–æ-–∫–æ–¥—ã –Ω–∏–∂–µ (_${codeQty} —à—Ç—É–∫_)
      \n${promoCodesReply}
      \n–£–≤–∏–¥–∏–º—Å—è –Ω–∞ —Ñ–∏–Ω–∏—à–µ!`,
      Extra.markdown()
    );
  } else {
    reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã! –ù–∞–±–µ—Ä–∏—Ç–µ /help, —á—Ç–æ–±—ã –¥–ª—è –ø–æ–º–æ—â–∏.');
  }
};

const unusedCommand = async ({ reply }) => {
  const unusedPromoCount = await Promo.countDocuments({ isUsed: false });
  reply(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤ –≤ –±–∞–∑–µ - ${unusedPromoCount}`);
};

const resetCommand = async ({ reply }) => {
  const resetResponse = await Promo.updateMany(
    {},
    { isUsed: false, tabTeam: '', ipId: '' }
  );
};

/**
 * Register commands
 */
marathonBot.command('promo', promoCommand);
marathonBot.command('unused', unusedCommand);
marathonBot.command('resetallplease', resetCommand);
marathonBot.command('help', helpCommand);

marathonBot.launch();
